
#lang planet neil/sicp

(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))

(test 0 (p))

; # 作用的順序
;作用的順序の評価[1](applicative-order evaluation)は、もっぱらプログラミング言語よりは計算模型で使われる用語で、
;まず引数を全て評価し、それに関数をapply(作用、ないし適用)する、という方法である。
;正規順序の評価(normal-order evaluation)の逆として、対になっている。
;プログラミング言語における値呼びに同じとされることも多いが、英語版Wikipediaでは、関数の引数を左から右に後順に走査して簡約可能な式を簡約していく評価戦略で「値呼びとは異なり、関数を作用させる以前に可能な限り関数本体内の項数を減らそうとする」ものとしている。
;まずは引数を全て評価するのでtest()は無限ループに入る。

; # 正規順序
;正規順序の評価[1](normal-order evaluation)も、もっぱらプログラミング言語よりは計算模型で使われる用語で、
;最も外側の簡約可能な式を簡約する評価戦略であり、関数の引数を評価する前に関数を適用する。
;プログラミング言語における名前呼びに同じとされることも多いが、英語版Wikipediaでは、名前呼びでは適用されない関数の本体内までは評価しない点が異なるとしている。
;まず関数の引数を評価する前に関数を適用するので(if (= x 0))が評価され0になる